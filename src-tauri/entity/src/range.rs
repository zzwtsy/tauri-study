//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "range")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    #[sea_orm()]
    pub id: i64,
    pub date: String,
    pub end: String,
    pub start: String,
    pub text: String,
    pub timezone: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::categories::Entity")]
    Categories,
    #[sea_orm(has_many = "super::dependencies::Entity")]
    Dependencies,
    #[sea_orm(has_many = "super::editors::Entity")]
    Editors,
    #[sea_orm(has_many = "super::grand_total::Entity")]
    GrandTotal,
    #[sea_orm(has_many = "super::languages::Entity")]
    Languages,
    #[sea_orm(has_many = "super::machines::Entity")]
    Machines,
    #[sea_orm(has_many = "super::operating_systems::Entity")]
    OperatingSystems,
    #[sea_orm(has_many = "super::projects::Entity")]
    Projects,
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Categories.def()
    }
}

impl Related<super::dependencies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dependencies.def()
    }
}

impl Related<super::editors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Editors.def()
    }
}

impl Related<super::grand_total::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GrandTotal.def()
    }
}

impl Related<super::languages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Languages.def()
    }
}

impl Related<super::machines::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Machines.def()
    }
}

impl Related<super::operating_systems::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OperatingSystems.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
